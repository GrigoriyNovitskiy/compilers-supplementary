-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, w], insns) {
  -- c.fst - stack, c.snd -> c
  case insns of
    {}        -> c
  | head:tail -> 
        --  printf(head.string, "\n");
         case head of
           WRITE     -> case stack of
                        h:t -> eval ([t, st, writeWorld(h, w)], tail) 
                        esac
         | READ      -> var new_c = readWorld(w);
                        eval ([new_c.fst : stack, st, ((new_c).snd)], tail)
         | BINOP (s) -> case stack of
                        y:x:t -> eval([evalOp(s, x, y): t, st, w] , tail) 
                        esac
         | LD    (x) -> eval ([(st)(x) : stack, st, w], tail)
         | ST    (x) -> case stack of
                         h:t -> eval ([t, (st) <- [x, h], w], tail) 
                        esac
         | CONST (n) -> eval ([n : stack, st, w], tail)
         esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  -- failure ("compileExpr not implemented\n")
  case expr of
      Var   (x)        -> {LD (x)}
    | Const (n)        -> {CONST (n)}
    | Binop (op, x, y) -> compileExpr (x) +++ compileExpr (y) +++ { BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- failure ("compileSM not implemented\n")
  case stmt of
    Assn (x, e)    -> compileExpr(e) +++ { ST (x)}
  | Seq (lhs, rhs) -> compileSM(lhs) +++ compileSM(rhs)
  | Skip           -> {}
  | Read (x)       -> { READ, ST (x)}
  | Write (e)      -> compileExpr(e) +++ { WRITE }    
  esac
}