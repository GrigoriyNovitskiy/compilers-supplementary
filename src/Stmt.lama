-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  -- printf("bbbbbb\n");
  case stmt of
     Assn  (s, e) -> --printf("assn\n");
                    [c.fst <- [s, evalExpr (c.fst, e)], c.snd] 
  | Seq   (l, r) -> eval (eval (c, l), r)
  | Skip         -> --printf("skip\n");
                    c
  | Read  (s)    -> 
    var v = readWorld(c.snd);
    -- printf("read\n");
    [c.fst <- [s, v.fst], v.snd]
  | Write (e)    -> 
                    [c.fst, [(c.snd).fst, evalExpr(c.fst, e) : ((c.snd).snd)]]
  esac
  -- failure ("Stmt eval not implemented\n")
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
