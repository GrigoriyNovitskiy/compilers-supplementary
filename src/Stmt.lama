-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  -- printf("bbbbbb\n");
  case stmt of
     Assn  (s, e) -> --printf("assn\n");
                    [c.fst <- [s, evalExpr (c.fst, e)], c.snd] 
  | Seq   (l, r) -> eval (eval (c, l), r)
  | Skip         -> --printf("skip\n");
                    c
  | Read  (s)    -> 
    var v = readWorld(c.snd);
    -- printf("read\n");
    [c.fst <- [s, v.fst], v.snd]
  | Write (e)    -> 
                    [c.fst, [(c.snd).fst, evalExpr(c.fst, e) : ((c.snd).snd)]]
  | If (e, s_true, s_false) ->
                  var flag = evalExpr(c.fst, e);
                  if (flag == 0) then 
                    eval (c, s_false) 
                  else
                    eval (c, s_true)
                  fi
  | While (e, stmt) ->
                  while (evalExpr(c.fst, e))  do
                   c := eval(c, stmt)
                  od;
                  c   
  | DoWhile (stmt, e) ->
                  do
                   c := eval(c, stmt)
                  while (evalExpr(c.fst, e))
                  od;
                  c                               
  esac
  -- failure ("Stmt eval not implemented\n")
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
