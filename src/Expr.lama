-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalOp (op, x, y) {
  case op of
    "+" -> x + y
  | "-" -> x - y
  | "*" -> x * y
  | "/" -> x / y
  | "%" -> x % y
  | "<" -> x < y
  | ">" -> x > y
  | "==" -> x == y
  | "<=" -> x <= y
  | ">=" -> x >= y
  | "!=" -> x != y
  | "&&" -> x && y
  | "||" -> x !! y
  | "&&" -> x && y
	| "!!" -> x !! y
  esac 
}

public fun evalExpr (st, expr) {
  -- fun (st) {
  case expr of 
     Var (a) -> st (a) 
  |  Const (c) -> c 
  |  Binop (op, l, r) -> evalOp (op, evalExpr (st, l), evalExpr (st, r))
  esac
  -- }
}