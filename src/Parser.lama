-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}



-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr({
								[Left, {[s("!!"), fun (l, op, r) {Binop("!!", l, r)}]}],
								[Left, {[s("&&"), fun (l, op, r) {Binop("&&", l, r)}]}],
								[Nona, {[s("<"), fun (l, op, r) {Binop("<", l, r)}],
								        [s(">"), fun (l, op, r) {Binop(">", l, r)}],
										[s("<="), fun (l, op, r) {Binop("<=", l, r)}],
										[s(">="), fun (l, op, r) {Binop(">=", l, r)}],
										[s("=="), fun (l, op, r) {Binop("==", l, r)}],
										[s("!="), fun (l, op, r) {Binop("!=", l, r)}]}],
								[Left, {[s("+"), fun (l, op, r) {Binop("+", l, r)}],
								        [s("-"), fun (l, op, r) {Binop("-", l, r)}],
										[s("^"), fun (l, op, r) {Binop("^", l, r)}]}],
								[Left, {[s("*"), fun (l, op, r) {Binop("*", l, r)}], 
										[s("/"), fun (l, op, r) {Binop("/", l, r)}],
										[s("%"), fun (l, op, r) {Binop("%", l, r)}]}]}, primary));

var stmt = memo $ eta syntax ( one_stmt     
                                 | l=one_stmt s[";"] r=stmt {Seq (l, r)}
    ),
    parse_if = memo $ eta syntax (  kElse s2=stmt	{s2}
                                  | kElif e=exp kThen s_true=stmt s_false=parse_if {If (e, s_true, s_false)}
                                  | s[""]  {Skip}),

    one_stmt = memo $ eta syntax ( kRead x=inbr[s("("), lident, s(")")] {Read (x)} 
                                 | kSkip                                {Skip} 
                                 | kWrite e=inbr[s("("), exp, s(")")]   {Write (e)} 
                                 | x=lident s[":="] e=exp               {Assn(x, e)}
                                 | kIf e=exp kThen s1=stmt s2=parse_if kFi    {If (e, s1, s2)}
                                 | kWhile e=exp kDo s=stmt kOd {While (e, s)}
                                 | kDo s=stmt kWhile e=exp kOd {DoWhile (s, e)}
                                 | kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd {Seq(s1, While(e, Seq(s3, s2)))}
    );


-- Public top-level parser
public parse = stmt;
